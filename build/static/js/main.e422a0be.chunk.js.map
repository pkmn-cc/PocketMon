{"version":3,"sources":["logo.svg","app.tsx","utils/theme.ts","utils/service-worker-registration.ts","utils/analytics.ts","index.tsx"],"names":["App","Container","maxWidth","className","Paper","src","logo","alt","Typography","variant","component","gutterBottom","Button","color","theme","createMuiTheme","palette","type","primary","main","light","dark","secondary","error","red","A400","background","default","overrides","MuiPaper","root","padding","margin","backgroundColor","MuiButton","Boolean","window","location","hostname","test","onPerfEntry","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","log","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"6OAAe,MAA0B,iC,eCOlC,SAASA,IACd,OACE,cAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAU,MAAnC,SACE,eAACC,EAAA,EAAD,WACE,qBAAKC,IAAKC,EAAMH,UAAU,WAAWI,IAAI,SACzC,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAApD,uBAGA,cAACC,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,UAAlC,4BAGA,cAACD,EAAA,EAAD,CAAQH,QAAQ,YAAYI,MAAM,YAAlC,mC,oBCqBOC,EApCDC,YAAe,CAC3BC,QAAS,CACPC,KAAM,QACNC,QAAS,CACPC,KAAM,UACNC,MAAO,UACPC,KAAM,WAERC,UAAW,CACTH,KAAM,UACNC,MAAO,UACPC,KAAM,WAERE,MAAO,CACLJ,KAAMK,IAAIC,MAEZC,WAAY,CACVC,QAAS,YAGbC,UAAW,CACTC,SAAU,CACRC,KAAM,CACJC,QAAS,YACTC,OAAQ,OACRC,gBAAiB,SAGrBC,UAAW,CACTJ,KAAM,CACJE,OAAQ,WC/BIG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhB,yDAAyDC,KAAKH,OAAOC,SAASC,W,ICFlDE,E,wBCMhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAACC,EAAA,EAAD,CAAe9B,MAAOA,EAAtB,UACE,cAAC+B,EAAA,EAAD,IACA,cAAC7C,EAAD,SAGJ8C,SAASC,eAAe,SFsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC/B,GACNgC,QAAQhC,MAAMA,EAAMiC,aCzHIhB,ECoBhBe,QAAQE,MDnBHjB,aAAuBkB,UAExC,6BAAqBP,MAAK,YAAgD,IAA9CQ,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOnB,GACPoB,EAAOpB,GACPqB,EAAOrB,GACPsB,EAAOtB,GACPuB,EAAQvB,Q","file":"static/js/main.e422a0be.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.9220a15d.svg\";","import React from 'react';\n\nimport {Container, Typography, Button, Paper} from '@material-ui/core';\n\nimport logo from './logo.svg';\nimport './app.css';\n\nexport function App() {\n  return (\n    <Container maxWidth=\"sm\" className=\"App\">\n      <Paper>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          PocketMon\n        </Typography>\n        <Button variant=\"contained\" color=\"primary\">\n          Primary Button\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\">\n          Secondary Button\n        </Button>\n      </Paper>\n    </Container>\n  );\n}\n","import {red} from '@material-ui/core/colors';\nimport {createMuiTheme} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n    primary: {\n      main: '#61dafb',\n      light: '#61dafb',\n      dark: '#21a1c4',\n    },\n    secondary: {\n      main: '#b5ecfb',\n      light: '#61dafb',\n      dark: '#21a1c4',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#282c34',\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        padding: '20px 10px',\n        margin: '10px',\n        backgroundColor: '#fff', // 5d737e\n      },\n    },\n    MuiButton: {\n      root: {\n        margin: '5px',\n      },\n    },\n  },\n});\n\nexport default theme;\n","/* eslint-disable @typescript-eslint/no-floating-promises */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.test(window.location.hostname)\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched, but the previous\n              // service worker will still serve the older content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config?.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config?.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && !contentType.includes('javascript'))\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ReportHandler} from 'web-vitals';\nimport {useEffect, useState} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport ReactGA from 'react-ga';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport const usePageTracking = () => {\n  const location = useLocation();\n  const [initialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    if (!window.location.href.includes('localhost')) {\n      ReactGA.initialize('UA-180700059-1');\n      setInitialized(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (initialized) {\n      ReactGA.pageview(location.pathname + location.search);\n    }\n  }, [initialized, location]);\n};\n\nexport const sendToAnalytics =\n  ({id, name, value}: { id: string; name: string; value: number }) => {\n    ReactGA.event({\n      category: 'Web Vitals',\n      action: name,\n      value: Math.round(name === 'CLS' ? value * 1000 : value), // values must be integers\n      label: id, // id unique to current page load\n      nonInteraction: true, // avoids affecting bounce rate\n    });\n  };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport {App} from './app';\nimport theme from './utils/theme';\nimport * as serviceWorkerRegistration from './utils/service-worker-registration';\nimport {reportWebVitals} from './utils/analytics';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// https://bit.ly/CRA-vitals\nreportWebVitals(console.log /* sendToAnalytics */);\n"],"sourceRoot":""}